# We need to create a method to insert a key->value pair into an index in the hashmap list instance variable.



class HashMap:
    def insert(self, key, value):
        i = self.key_to_index(key)
        # We insert a tuple at an index generated by the `.key_to_index` method
        # this way we store the key -> value in a bucket, at a specific index associated with the key, in our hashmap table
        self.hashmap[i] = (key, value)


    # don't touch below this line


    def key_to_index(self, key):
        sum = 0
        for c in key:
            sum += ord(c)
        return sum % len(self.hashmap)

    def __init__(self, size):
        self.hashmap: list[tuple[str, int] | None] = [None for _ in range(size)]

    def __repr__(self):
        final = ""
        for i, v in enumerate(self.hashmap):
            if v != None:
                final += f" - {i}: {str(v)}\n"
            else:
                final += f" - {i}: None\n"
        return final


# --------------------------------------------------------------------------------------------------


# there will be collisions so "apple" and "banana" wil be overriden by their later counterparts
valkey = [("apple", 1), ("banana", 2), ("apple", 592), ("banana", 54)]

h = HashMap(8)
print(f"For a hash map with size: {len(h.hashmap)}\n")

for p in valkey:
    h.insert(p[0], p[1])

print(h)
